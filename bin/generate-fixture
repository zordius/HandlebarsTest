#!/usr/bin/env node

var fs = require('fs'),
    handlebars = require('../handlebars.js'),
    dir = 'fixture/',
    partial_total = 0,
    partial_ok = 0,
    gen_total = 0,
    ok_total = 0,
    generateFixtures = function () {
        fs.readdir(dir, function (err, files) {
            files.forEach(function (file) {
                var tmpl = file.replace(/-\d+\.json/, '.tmpl');
        
                if (!file.match(/\.json$/)) {
                    return;
                }
        
                gen_total += 1;
                console.log('# ' + file + ' > ' + tmpl);
                fs.readFile(dir + file, 'utf8', function (err, data) {
                    var json;
                    try {
                        json = JSON.parse(data);
                    } catch (E) {
                        console.log('ERROR parsing ' + file + ' !!!!!:' + E);
                    }
                    fs.readFile(dir + tmpl, 'utf8', function (err, data) {
                        var html,
                            fn = file.replace(/\.json/, '.txt');

                        try {
                            html = handlebars.compile(data)(json);
                        } catch (E) {
                            console.log('ERROR on compile ' + file + '!!!! :' + E);
                        }
        
                        fs.writeFileSync(dir + fn, html);
                        ok_total += 1;
                        console.log('  ' + fn + ' OK');
                        if (gen_total == ok_total) {
                            console.log('<< ALL SUCCESSED: ' + gen_total);
                        }
                    });
                });
            });
        });
    };

console.log(handlebars);

handlebars.registerHelper('helper1', function (url, text) {
    return '<a href="' + url + '">' + text + '</a>';
});

handlebars.registerHelper('helper2', function (options) {
    return '<a href="' + options.hash.url + '">' + options.hash.text + '</a>(' + options.hash['ur"l'] + ')';
});

handlebars.registerHelper('helper3', function () {
    var options = arguments[arguments.length-1];
    return options.fn(['test1', 'test2', 'test3']);
});

handlebars.registerHelper('helper4', function () {
    var options = arguments[arguments.length-1];

    if (typeof options.hash.val !== 'undefined') {
        this.helper4_value = options.hash.val % 2;
        return options.fn(this);
    }
    if (typeof options.hash.odd !== 'undefined') {
        return options.fn([1,3,5,7,9]);
    }
    return '';
});

fs.readdir(dir, function (err, files) {
    files.forEach(function (file) {
        if (!file.match(/\.tmpl/)) {
            return;
        }
        partial_total++;
        fs.readFile(dir + file, 'utf8', function (err, data) {
            handlebars.registerPartial(file.replace(/\.tmpl/, ''), data);
            partial_ok++;
            if (partial_ok == partial_total) {
                generateFixtures();
            }
        });
    });
});

