#!/usr/bin/php -dopen_basedir=.
<?php
$reports = Array();
$libs = Array();
$base = 'https://github.com/zordius/HandlebarsTest/blob/master/';
$times = isset($argv[1]) ? $argv[1] : '';
$tmode = $times;
$php_cmd = isset($argv[3]) ? 'php ' : '';
$pwd = getcwd();
$rex = '';

foreach (glob('cloned/*') as $file) {
    $libs[] = preg_replace('/cloned\//', '', $file);
}

if ($times === 'L') {
    exec('pushd cloned/lightncandy >/dev/null;git tag --list --sort version:refname;popd >/dev/null', $versions);
    $versions[] = 'master';
    foreach ($versions as $version) {
        $reports[$version] = Array();
        echo system("pushd cloned/lightncandy >/dev/null;git checkout $version;popd >/dev/null");
        foreach (glob('fixture/*.json') as $test) {
          $result = system("bin/hbtest lightncandy $test 10020 2>/dev/null");
          $reports[$version][$test] = json_decode($result, true);
        }
    }
    $rex = 'versions-';
} else if ($times === 'T') {
    $times = '';
    for ($i=1;$i<100;$i++) {
      if ($i>10) {$i+=9;}
      $report = Array();
      $j = substr($i + 1000, 1);
      $tmpl = "fixture/tokens.$j.tmpl";
      $json = "fixture/tokens.$j-001.json";
      file_put_contents($tmpl, str_repeat("{{name}}\n", $i));
      file_put_contents($json, '{"name": "David"}', $i);
      foreach ($libs as $lib) {
        $result = system("bin/hbtest $lib $json $times");
        $report[] = json_decode($result, true);
      }
      unlink($tmpl);
      unlink($json);
      $reports[$json] = $report;
    }
} else if ($times === 'F') {
    require __DIR__ . '/../inc/loader.inc';

    $flags = Array(
        LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_ECHO | LightnCandy::FLAG_RENDER_DEBUG,
//        LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_STANDALONEPHP | LightnCandy::FLAG_RENDER_DEBUG,
//        LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_ECHO | LightnCandy::FLAG_STANDALONEPHP | LightnCandy::FLAG_RENDER_DEBUG,
        LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_RENDER_DEBUG,
        LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_ECHO,
        LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_STANDALONEPHP,
        LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_ECHO | LightnCandy::FLAG_STANDALONEPHP,
        LightnCandy::FLAG_HANDLEBARSJS,

        LightnCandy::FLAG_PROPERTY | LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_ECHO | LightnCandy::FLAG_RENDER_DEBUG,
        LightnCandy::FLAG_PROPERTY | LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_RENDER_DEBUG,
        LightnCandy::FLAG_PROPERTY | LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_ECHO,
        LightnCandy::FLAG_PROPERTY | LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_STANDALONEPHP,
        LightnCandy::FLAG_PROPERTY | LightnCandy::FLAG_HANDLEBARSJS | LightnCandy::FLAG_ECHO | LightnCandy::FLAG_STANDALONEPHP,
        LightnCandy::FLAG_PROPERTY | LightnCandy::FLAG_HANDLEBARSJS,
    );
    $err = Array();
    foreach (glob('fixture/*.json') as $test) {
        foreach ($flags as $flag) {
            ob_start();
            $result = json_decode(system("{$php_cmd}bin/hbtest lightncandy $test -$flag 2>/dev/null"), true);
            ob_end_clean();
            if (! $result) {
                $result = Array('test' => $test, 'diff' => '', 'match' => 'X');
            }
            $result['flag'] = $flag;
            if ($result['match'] == 'YES') {
                echo '.';
            } else {
                echo substr($result['match'], 0, 1);
                $err[] = $result;
            }
        }
    }
    echo "\n";
    $diff ='';
    foreach ($err as $e) {
        echo "Test {$e['test']} result as {$e['match']}";
        if ($diff !== $e['diff']) {
            echo "\n{$e['diff']}\n";
            $diff = $e['diff'];
        } else {
            echo " (same diff)\n";
        }
    }
    $c = count($err);
    $kc = isset($argv[2]) ? $argv[2] : 0;
    echo "Know issues: $kc , detected issues: $c ...." . (($c > $kc) ? 'ERROR!!' : 'PASS') . "\n";
    exit(max($c - $kc,0));
} else {
    $redir = '';
    if ($times === 'R') {
        include_once('cloned/lightncandy/src/loader.php');
        $times = - \LightnCandy\LightnCandy::FLAG_HANDLEBARSJS;
        $redir = ' 2>/dev/null';
    }

    foreach (glob('fixture/*.json') as $test) {
      $report = Array();
      foreach ($libs as $lib) {
        if ($tmode === 'R') {
            echo '*';
            ob_start();
        }
        $result = system(__DIR__ . "/hbtest $lib $test $times$redir");
        $R = json_decode($result, true);
        $report[] = $R;
        if ($tmode === 'R') {
            ob_end_clean();
        }
        if (!$R) {
            error_log("ERROR! bin/hbtest $lib $test $times$redir ... result: $result");
        }
      }
      $reports[$test] = $report;
    }
}
$meta = $report[0];

$mode = 'In this test lightncandy is configured as HANDLEBARS'
        . (((($times % 2) == 1) || ($tmode === 'R')) ? '+ JS COMPATIBLE' : '')
        . ((($times % 3) == 1) ? '+ STANDALONE' : '')
        . ((($times % 5) == 1) ? '+ PERFORMANCE' : '');

$Fmap = Array(
    'YES' => '%Y%',
    'NO' => '%X%',
    'OUTPUT' => 'diff',
    'CR/LF' => 'cr/lf',
    'QUOTE' => 'quote',
    'SINGLEQUOTE' => 'squote'
);

$Dict = Array(
    'YES' => 'Exact same behavior with handlebars.js run in nodejs',
    'NO' => 'Do not support, can not parse the template',
    'OUTPUT' => 'Do not output for array value, object or true',
    'CR/LF' => 'Output more or less CR/LF (minor issue)',
    'QUOTE' => 'Encode \' to &amp;#039;, not to &amp;#x27; (minor issue)',
    'SINGLEQUOTE' => 'Do not encode \' to &amp;#x27;'
);

date_default_timezone_set('Asia/Taipei');
$rt = date('Ymd.His');
$rn  = "report/$rex$rt";
$dt = date('Y-m-d H:i:s');

// output quick feature report
print "\n";
ob_start();
print "*$mode* (test @ $dt)\n\n";
foreach ($Dict as $k => $v) {
    print "  * `$k` : $v\n";
}
print "\n\n|\ttest case\t\t| " . join("\t|\t", $libs) . "\t|\n";
print "|-------------------------------|-----------------------|-----------------------|-----------------------|-----------------------|\n";
foreach ($reports as $name => $report) {
    $fn = substr('                        ' . basename($name, '.json'), -28);
    print "| $fn";
    foreach ($report as $test) {
        print "\t|\t" . substr('                ' . ((is_array($test) && array_key_exists('match', $test)) ? $test['match'] : 'NO'), -13);
    }
    print " |\n";
}

if ($times && ($times <= 10) && ($tmode !== 'R') && ($tmode !== 'L')) {
    ob_flush();
    exit;
} else {
    if ($tmode === 'R') {
        file_put_contents("FEATURES.md", ob_get_clean());
        exit;
    }
    if ($tmode === 'L') {
        ob_get_clean();
    } else {
        file_put_contents("$rn-features.txt", ob_get_clean());
    }
}

// output json report
file_put_contents("$rn.json", json_encode(Array(
    'meta' => Array(
        'loop' => $meta['loop'],
        'time' => $rt,
    ),
    'reports' => $reports,
)));

if ($tmode === 'L') {
    exit;
}

// output text report
print "\n";
ob_start();
print "Test libraries in *{$meta['loop']}* times, results as N seconds\n";
print "*$mode*\n";
print "|\ttest case\t| " . join("\t|\t", $libs) . "\t|\n";
foreach ($reports as $name => $report) {
    $fn = substr('                ' . basename($name, '.json'), -20);
    print "| $fn";
    foreach ($report as $test) {
        print "\t|\t" . substr('                ' . number_format($test['time'], 3), -13);
    }
    print " |\n";
}
if ($times && ($times < 10)) {
    ob_flush();
    exit;
} else {
    file_put_contents("$rn.txt", ob_get_clean());
}

?>
