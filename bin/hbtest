#!/usr/bin/php -dopen_basedir=.
<?php

require_once('inc/utils.inc');

if (count($argv) < 3) {
    print_help();
}

$test_times = (count($argv) > 3) ? $argv[3] : 100000;
$diffcmd = null;
foreach (Array('colordiff', 'colordiff.pl', 'diff') as $c) {
    exec("$c 2>/dev/null", $n, $r);
    if ($r < 127) {
        $diffcmd = $c;
        break;
    }
}

if ($argv[1] == 'none') {
    warn("###do $test_times loop test");
    $start_time = microtime(true);
    for ($i = 1; $i < $test_times;$i++) {
    }
    $duration = microtime(true) - $start_time;
    warn("Run $test_times times nop takes $duration seconds");
    exit();
}

$debug = (($test_times < 0) && !isset($argv[4])) ? false : true;

$tokenTest = preg_match('/token/', $argv[2]);
$input = file_get_contents($argv[2]);
$vars = json_decode($input, true);
debugp("### Input:\n$input\n### as PHP:");
debugp(print_r($vars, true));

// Prepare template
require_once(__DIR__ . '/../inc/loader.inc');
if (!defined('LightnCandy::FLAG_HANDLEBARS')) {
    $flag = LightnCandy::FLAG_HANDLEBARSJS;
} else {
    $flag = LightnCandy::FLAG_HANDLEBARS | LightnCandy::FLAG_ERROR_LOG;
    if ($argv[1] == 'lightncandy') {
        if (($test_times % 2) == 1) {
            $flag = $flag | LightnCandy::FLAG_JS;
        }
        if (($test_times % 3) == 1) {
            $flag = $flag | LightnCandy::FLAG_STANDALONE;
        }
        if (($test_times % 5) == 1) {
            $flag = $flag | LightnCandy::FLAG_BESTPERFORMANCE;
        }
        if ($test_times < 0) {
            $flag = - $test_times;
        }
    }
}

try {
    prepare_tmpl($argv[1], preg_replace('/(-\d+)*\.json/', '.tmpl', $argv[2]), Array(
        'flags' => $flag,
        'basedir' => './fixture',
        'helpers' => Array(
            'helper1' => function ($args, $named) {
                $u = (isset($args[0])) ? $args[0] : 'undefined';
                $t = (isset($args[1])) ? $args[1] : 'undefined';
                return "<a href=\"{$u}\">{$t}</a>";
            },

            'helper2' => function ($args, $named) {
                $u = isset($named['url']) ? jsraw($named['url']) : 'undefined';
                $t = isset($named['text']) ? jsraw($named['text']) : 'undefined';
                $x = isset($named['ur"l']) ? $named['ur"l'] : 'undefined';
                return "<a href=\"{$u}\">{$t}</a>({$x})";
            },
        ),
        'blockhelpers' => Array(
            'helper3' => function ($cx, $args, $named) {
                return Array('test1', 'test2', 'test3');
            }
        ),
        'hbhelpers' => Array(
            'helper4' => function ($options) {
                if (isset($options['hash']['val'])) {
                    $options['_this']['helper4_value'] = $options['hash']['val'] % 2;
                    return $options['fn']($options['_this']);
                }
                if (isset($options['hash']['odd'])) {
                    return $options['fn'](array(1,3,5,7,9));
                }
                return '';
            },
            'myeach' => function ($context, $options) {
                $ret = '';
                foreach ($context as $cx) {
                    $ret .= $options['fn']($cx);
                }
                return $ret;
            },
        ),
    ));

    if ($argv[1] == 'lightncandy') {
        debugp("### Handlebar usage:\n");
        debugp(print_r(LightnCandy::getContext(), true));
    }

    // Execute template
    if (isset($argv[4])) {
        $result = $test_tmpl ? $test_tmpl->$test_method($vars) : $test_method($vars);
    } else {
        @$result = $test_tmpl ? $test_tmpl->$test_method($vars) : $test_method($vars);
    }
} catch (Excaption $e) {
    if (isset($argv[4])) {
        throw $e;
    }
    $result = false;
}

debugp("### Output:\n$result");

$stdf = preg_replace('/\.json/', '.txt', $argv[2]);
$standard = $tokenTest ? null :  file_get_contents($stdf);
$outf = preg_replace('/\.json/', ".$argv[1].txt", $argv[2]);
file_put_contents($outf, $result);
$match = 'YES';
$diff = null;
if ($standard && ($result !== $standard)) {
    if (preg_replace('/\r|\n/', '', $result) === preg_replace('/\r|\n/', '', $standard)) {
        debugp("!!!!! ERROR: the output is not exact same with fixture (more or less CR/LF)\n");
        $match = 'CR/LF';
    } else if (preg_replace('/\'/', '&#x27;', $result) === $standard) {
        debugp("!!!!! ERROR: the output is not exact same with fixture (single quote not encoded)\n");
        $match = 'SINGLEQUOTE';
    } else if (preg_replace('/&#039;/', '&#x27;', $result) === $standard) {
        debugp("!!!!! ERROR: the output is not exact same with fixture (urlencode difference on single quote)\n");
        $match = 'QUOTE';
    } else if ($result == false) {
        debugp("!!!!! ERROR: the lib do not support this feature\n");
        $match = 'NO';
    } else {
        debugp("!!!!! ERROR: the output is not same with fixture\n");
        $match = 'OUTPUT';
    }
    debugp("# STANDARD:\n$standard\n");
    if ($diffcmd) {
        debugp("# DIFF:\n");
        $diff = shell_exec("$diffcmd $stdf $outf 2>/dev/null");
        if ($debug) {
            debugp($diff);
        }
    }
}

if (($test_times < 0) || ($match !== 'NO')) {
    if ($test_times < 0) {
        $test_times = 1;
    }
    debugp("###do $test_times loop test");

    $start_time = microtime(true);
    if ($test_tmpl) {
        for ($i = 0; $i < $test_times;$i++) {
            $test_tmpl->$test_method($vars);
        }
    } else {
        for ($i = 0; $i < $test_times;$i++) {
    /* skip php warning */
    @        $test_method($vars);
        }
    }
    $duration = microtime(true) - $start_time;
    debugp("Render $test_times times with $argv[1] lib takes $duration seconds");
} else {
    debugp("Skip $test_times times test with $argv[1] lib due to result bad");
    $duration = 0;
}

print json_encode(Array(
    'lib' => $argv[1],
    'test' => $argv[2],
    'loop' => $test_times,
    'time' => $duration,
    'match' => $match,
    'diff' => $diff,
));

function print_help() {
    global $argv;

    print <<<PRINTEND

usage: $argv[0] libName testFile [testTimes]

    libName = one of: none , lightncandy , handlebars.php , mustache-php , mustache.php 
    testTimes = default is 100000

    Example: $argv[0] mustache.php fixture/001-simple-vars-001.json


PRINTEND
    ;
    exit(1);
}

function debugp($t) {
    global $debug;

    if ($debug) {
        warn($t);
    }
}

// Simulate Javascript toString() behaviors
function jsraw ($i) {
    if ($i === true) {
        return 'true';
    }
    if ($i === false) {
        return 'false';
    }
    return $i;
}

?>
